import { saveAs } from 'file-saver';
import * as docx from 'docx';
import { jsPDF } from 'jspdf';
import remarkGfm from 'remark-gfm'
import TextareaAutosize from 'react-textarea-autosize';
import { BookmarkCheck, BotIcon, ClipboardCheck, Copy, Download, FileDown, FileText, FileType, Forward, RefreshCcw, ThumbsDown, UserRound, X } from 'lucide-react';
import Markdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { useState, useEffect, useRef } from 'react';


function MessageCard({ content, role, onRegenerate, sourceDocuments, lastMessageIndex, sendMessage, sendNotification }) {
    const [copied, setCopied] = useState(false);
    const [downloadFormat, setDownloadFormat] = useState('');
    const getTimestamp = () => {
        const date = new Date();
        return date.toISOString().replace(/[-:]/g, '').split('.')[0];
    };

    const handleDownload = (format) => {
        const timestamp = getTimestamp();
        const filenameBase = `chat_history_${timestamp}`;
        const updatedContent = `${content}\n\nGenerated by Synergy AI`;

        if (format === 'txt') {
            const blob = new Blob([updatedContent], { type: 'text/plain;charset=utf-8' });
            saveAs(blob, `${filenameBase}.txt`);
        } else if (format === 'docx') {
            const doc = new docx.Document({
                sections: [
                    {
                        properties: {},
                        children: [
                            new docx.Paragraph(content),
                            new docx.Paragraph("Generated by Synergy AI"),
                        ],
                    },
                ],
                footer: [
                    new docx.Paragraph({
                        children: [
                            new docx.TextRun({
                                text: 'Generated by Synergy AI',
                                bold: true,
                                color: '808080',
                                size: 20,
                            }),
                        ],
                        alignment: docx.AlignmentType.CENTER,
                    }),
                ]
            });
            // Add footer to the document

            docx.Packer.toBlob(doc).then((blob) => {
                saveAs(blob, `${filenameBase}.docx`);
            });
        } else if (format === 'pdf') {
            const doc = new jsPDF();

            // Split content into lines to fit within page width
            const contentLines = doc.splitTextToSize(content, 180); // Adjust width as needed

            // Set initial position for content
            let y = 10;

            // Loop through each line of content
            contentLines.forEach((line) => {
                // Check if adding this line would exceed the page height
                if (y + 10 > doc.internal.pageSize.height) {
                    doc.addPage(); // Add new page if content exceeds current page
                    y = 10; // Reset y position for new page
                }
                doc.text(line, 10, y);
                y += 10; // Move down 10 units
            });

            // Add watermark
            doc.setFontSize(20);
            doc.setTextColor(200);
            doc.text('Generated by Synergy AI', doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() / 2, null, null, 'center');

            // Save the PDF
            doc.save(`${filenameBase}.pdf`);
        }
    };

    const copyMessage = () => {
        navigator.clipboard.writeText(content)
            .then(() => {
                setCopied(true);
                setTimeout(() => setCopied(false), 2000); // Reset copied state after 2 seconds
            })
            .catch(err => console.error('Failed to copy:', err));
    };

    const handleRegenerate = () => {
        onRegenerate(); // Call the parent function to regenerate the message
    };

    const handleDownloadOptionClick = (format) => {
        setDownloadFormat(format);
        handleDownload(format);
    };

    const [selectedDocument, setSelectedDocument] = useState(null);

    const handleDocumentClick = (doc) => {
        setSelectedDocument(doc); // Set the clicked document as selected
    };

    const closeModal = () => {
        setSelectedDocument(null); // Close the modal by resetting selectedDocument
    };

    return (
        <>
            <div className="flex flex-col-reverse  w-full min-w-96 md:min-w-[1100px] ">
                {role === 'user' ? (
                    <UserRound
                        className="p-2 bg-purple-500 mx-2 relative w-12 h-12 ml-auto rounded-2xl overflow-hidden shadow-[0_0_0_0.25rem_#FEFEFE] dark:shadow-[0_0_0_0.25rem_#232627] transform -translate-y-4 text-white"
                        size={36}
                    />

                ) : (
                    // <Bot className="text-white p-2 bg-[#0084ff] mx-2 relative w-12 h-12 mr-auto rounded-2xl overflow-hidden shadow-[0_0_0_0.25rem_#FEFEFE] dark:shadow-[0_0_0_0.25rem_#232627] transform -translate-y-2" size={48} />
                    <div className="flex justify-normal ">
                        {/* Bot on the left */}
                        {/* <Bot className="text-white p-2 bg-[#0084ff] mx-2 relative w-12 h-12 rounded-2xl overflow-hidden shadow-[0_0_0_0.25rem_#FEFEFE] dark:shadow-[0_0_0_0.25rem_#232627] transform -translate-y-4" size={48} /> */}
                        <div className="">
                            <BotIcon className='p-2 dark:bg-[#232627] dark:text-white bg-[#f2f5f7] mx-2 relative w-12 h-12 rounded-2xl overflow-hidden shadow-[0_0_0_0.25rem_#FEFEFE] dark:shadow-[0_0_0_0.25rem_#232627] transform -translate-y-4 dark:border-2 dark:border-neutral-700' size={48} />
                        </div>

                        {/* {role === 'assistant' && lastMessageIndex && nextBestChoice.length > 0 && (
                            <div className="px-4 mt-4 md:flex hidden">
                                <div className="space-x-1 ">
                                    {nextBestChoice.map((choice, index) => (
                                        <button
                                            key={index}
                                            onClick={() => sendMessage(choice)}
                                            className="bg-[#e7dcfa] text-sm text-black py-2 px-4 inline-flex items-center rounded-lg transition-colors duration-300 ease-in-out hover:bg-purple-500  dark:text-gray-50 hover:text-white shadow-md whitespace-nowrap dark:bg-[#3b314f] dark:hover:bg-purple-500 mb-2 "
                                        >
                                            {choice.charAt(0).toUpperCase() + choice.slice(1).toLowerCase()}
                                            <Forward className='ml-2' size={16} />
                                        </button>
                                    ))}
                                </div>
                            </div>
                        )} */}



                        {/* Text and buttons on the right */}
                        <div className="shadow-[0_0_0_0.25rem_#FEFEFE] dark:shadow-[0_0_0_0.25rem_#232627] bg-[#e9edf0] dark:bg-[#141617] py-2 rounded-lg divide-x-2 divide-slate-400 flex items-center h-fit relative ml-auto">
                            <button onClick={copyMessage} className="px-2  transform transition-transform duration-300 group hover:scale-105">
                                {copied ? (
                                    <>
                                        <ClipboardCheck className="text-green-500" size={16} />

                                    </>
                                ) : (
                                    <>
                                        <Copy className="text-gray-800 hover:text-black dark:text-gray-300 dark:hover:text-white" size={16} />
                                        <span className="absolute top-6 left-1/2 -translate-x-1/2 scale-0 group-hover:scale-100 transition-all bg-purple-500 p-2 rounded text-white text-xs">Copy</span>
                                    </>
                                )}
                            </button>
                            <button onClick={handleRegenerate} className="px-2 transform transition-transform duration-300 group hover:scale-105">
                                <RefreshCcw className="text-gray-800 hover:text-black dark:text-gray-300 dark:hover:text-white" size={16} />
                                <span className="absolute top-6 left-1/2 -translate-x-1/2 scale-0 group-hover:scale-100 transition-all bg-purple-500 p-2 rounded text-white text-xs">Regenerate</span>
                            </button>
                            <div className="relative px-1 group inset-0 ">
                                <Download className="text-gray-800 hover:text-black dark:text-gray-300 dark:hover:text-white" size={16} />

                                {/* Dropdown menu */}
                                <div className="absolute top-4 -right-1/2 z-10 hidden group-hover:block duration-1000 group-hover:delay-500">
                                    <div className="bg-white dark:bg-[#141617] dark:text-gray-100 shadow-lg rounded-lg divide-x-2 divide-slate-400 flex mt-3 ">
                                        <button onClick={() => handleDownloadOptionClick('txt')} className="inline-flex flex-row justify-center items-center px-4 py-2 hover:bg-sky-100 dark:hover:bg-[#2e2f30] text-center rounded-l-lg">
                                            .txt
                                            <FileType className="ml-2" size={16} />
                                        </button>
                                        <button onClick={() => handleDownloadOptionClick('docx')} className="inline-flex flex-row justify-center items-center px-4 py-2 hover:bg-sky-100 dark:hover:bg-[#2e2f30] text-center">
                                            .docx
                                            <FileText className="ml-2" size={16} />
                                        </button>
                                        <button onClick={() => handleDownloadOptionClick('pdf')} className="inline-flex flex-row justify-center items-center px-4 py-2 hover:bg-sky-100 dark:hover:bg-[#2e2f30] text-center rounded-r-lg">
                                            .pdf
                                            <FileDown className="ml-2" size={16} />
                                        </button>
                                    </div>
                                </div>
                            </div>
                            {/* <button className="px-2">
                                <ThumbsUp className="text-gray-600 hover:text-black dark:text-gray-300 dark:hover:text-white" size={16} />
                            </button> */}

                            <button className="px-2 transform transition-transform duration-300 group hover:scale-105" onClick={() => sendNotification('Thank you! Your feedback is valuable and has been noted.')}>
                                <ThumbsDown className="text-gray-600 hover:text-black dark:text-gray-300 dark:hover:text-white" size={16} />
                                <span className="absolute top-6 -left-1 -translate-x-1/2 scale-0 group-hover:scale-100 transition-all bg-purple-500 p-2 rounded text-white text-xs ">Dislike</span>
                            </button>
                            <button className="px-2 transform transition-transform duration-300 group hover:scale-105" onClick={() => sendNotification('Your Decision has been noted for future monitoring')}>
                                <BookmarkCheck className="text-gray-600 hover:text-black dark:text-gray-300 dark:hover:text-white" size={16} />
                                <span className="absolute top-6 -left-1 -translate-x-1/2 scale-0 group-hover:scale-100 transition-all bg-purple-500 p-2 rounded text-white text-xs ">BookMark</span>
                            </button>

                        </div>


                    </div>

                )}
                {/* {role === 'assistant' && (
                       
                    )} */}

                <div className={`p-4 dark:text-gray-50 text-md font-sans ${role === 'user' ? 'dark:bg-[#19191c] border space-y-6 pt-6 px-6  border-3 border-n-2 rounded-[1.25rem] md:p-5 dark:border-transparent dark:bg-n-5/50 shadow-md' : 'dark:bg-[#141617] bg-[#f2f5f7] border space-y-6 pt-6 px-6 border-3 border-n-2 rounded-[1.25rem] md:p-5  dark:border-transparent dark:bg-n-5/50 shadow-md'} flex flex-1 flex-col dark:bg-dark-200 overflow-x-auto rounded-lg  space-y-4 lg:min-w-96`}>
                    <Markdown
                        remarkPlugins={[remarkGfm]}
                        components={{
                            code({ node, inline, className, children, ...props }) {
                                const match = /language-(\w+)/.exec(className || '');
                                return !inline && match ? (
                                    <SyntaxHighlighter
                                        style={prism}
                                        language={match[1]}
                                        PreTag="pre"
                                        {...props}
                                    >
                                        {String(children).replace(/\n$/, '')}
                                    </SyntaxHighlighter>
                                ) : (
                                    <code className={className} {...props}>
                                        {children}
                                    </code>
                                );
                            },
                            p({ children }) {
                                return <p className="mb-2">{children}</p>;
                            },
                            ul({ children }) {
                                return <ul className="list-decimal pl-8">{children}</ul>;
                            },
                            ol({ children }) {
                                return <ol className="list-disc pl-8">{children}</ol>;
                            },
                            li({ children }) {
                                return <li className="mb-2 ">{children}</li>;
                            },
                            dl({ children }) {
                                return <dl>{children}</dl>;
                            },
                            table({ children }) {
                                return (
                                    <table className="table-auto border-collapse bg-white dark:bg-[#222526]/70 dark:border-neutral-600 border-2 border-gray-200  rounded-lg shadow-lg overflow-hidden">
                                        {children}
                                    </table>
                                );
                            },
                            tr({ children }) {
                                return <tr className="border-collapse border-b-2 border-gray-200 dark:border-neutral-600">{children}</tr>;
                            },
                            th({ children }) {
                                return (
                                    <th className="p-2 border-collapse border-2 border-gray-200 dark:border-neutral-600 bg-gray-50 dark:bg-[#222526] rounded-lg">
                                        {children}
                                    </th>
                                );
                            },
                            td({ children }) {
                                return (
                                    <td className="p-2 border-collapse border-2 border-gray-200 dark:border-neutral-600 text-center">
                                        {children}
                                    </td>
                                );
                            },
                            blockquote({ children }) {
                                return <blockquote className="border-l-4 border-sky-500 p-2">{children}</blockquote>;
                            }
                        }}
                    >
                        {content}
                    </Markdown>


                </div>


            </div>
            <div>
                {role === 'assistant' && lastMessageIndex && sourceDocuments.length > 0 && (
                    <div className="mt-4 h-36 flex flex-row overflow-x-auto min-h- scrollbar-none z-50">
                        {sourceDocuments.map((doc, index) => (
                            <div
                                key={index}
                                className="bg-[#e7dcfa] text-black py-4 px-6 rounded-lg transition-transform transform hover:scale-105 my-2 hover:shadow-lg shadow-md dark:bg-[#3b314f] dark:text-gray-50 dark:hover:bg-purple-600 dark:hover:text-white min-w-[300px] mx-4 flex-shrink-0 cursor-pointer"
                                onClick={() => handleDocumentClick(doc)} // Handle click to show modal
                            >
                                <div className="text-base font-semibold mb-2 max-w-72 line-clamp-2">
                                    {doc.content}
                                </div>
                                <div className="text-sm text-gray-600 dark:text-gray-400">
                                    Confidence Score: {doc.score.toFixed(2)}
                                </div>
                            </div>
                        ))}
                    </div>
                )}

                {/* Modal for viewing the full content */}
                {selectedDocument && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 transition-opacity duration-300 ease-in-out">
                        <div className="relative bg-white dark:bg-gray-900 p-8 rounded-2xl shadow-2xl max-w-3xl w-full mx-4 transform transition-transform duration-500 ease-in-out">
                            <button
                                onClick={closeModal}
                                className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 focus:outline-none"
                            >
                                <X size={24} />
                            </button>
                            <h2 className="text-3xl font-bold mb-4 text-gray-800 dark:text-white">
                                Source Document
                            </h2>
                            <h3 className="text-xl font-semibold  dark:text-blue-400 mb-4">
                                Confidence Score: <span className='bg-green-500 text-white p-2 rounded-xl'>{selectedDocument.score.toFixed(2)}</span>
                            </h3>
                            <p className="text-lg text-gray-700 dark:text-gray-300 leading-relaxed mb-6">
                                {selectedDocument.content}
                            </p>
                        </div>
                    </div>

                )}
            </div>




        </>
    );
}

export default MessageCard;